import streamlit as st
import pandas as pd
from io import BytesIO
import base64

# ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel ==========
def to_excel_download(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Drugs')
    b64 = base64.b64encode(output.getvalue()).decode()
    return f'''
    <a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" 
       download="filtered_drugs.xlsx" style="text-decoration: none;">
       üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel
    </a>
    '''

# ========== ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ==========
df = pd.read_excel("druglist.xlsx")

# ========== Page Config ==========
st.set_page_config(page_title="Drug Finder", page_icon="üíä", layout="centered")
st.title("üíä ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏≤ ‡∏£‡∏û.‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á‡∏ä‡∏±‡∏¢‡∏û‡∏±‡∏í‡∏ô‡πå ‡∏õ‡∏µ‡∏á‡∏ö 68")

# ========== CSS Style ==========
st.markdown("""
<style>
.drug-card {
    padding: 12px 16px;
    margin-bottom: 12px;
    border-left: 6px solid #38bdf8;
    border-radius: 8px;
    font-size: 16px;
    transition: background-color 0.3s ease, color 0.3s ease;
    box-shadow: 0 2px 6px rgba(0,0,0,0.05);
}

/* ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏ß‡πà‡∏≤‡∏á */
@media (prefers-color-scheme: light) {
    .drug-card {
        background-color: #f0f9ff;
        color: #000000;
    }
}

/* ‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏∑‡∏î */
@media (prefers-color-scheme: dark) {
    .drug-card {
        background-color: #1e293b;
        color: #ffffff;
    }
}

a {
    color: #ffffff;
    background-color: none;
    padding: 8px 16px;
    border-radius: 6px;
    display: inline-block;
    margin-top: 10px;
    text-decoration: none;
}
a:hover {
    background-color: #1e40af;
}
</style>
""", unsafe_allow_html=True)

# ========== ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á ==========
if st.button("üîÑ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
    st.session_state["subtype1_filter"] = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    st.session_state["subtype2_filter"] = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    st.session_state["account_filter"] = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    st.session_state["search_text"] = ""

# ========== ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å ==========
subtype1_list = df["subtype1_name"].dropna().unique()
selected_subtype1 = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(subtype1_list), key="subtype1_filter")
if selected_subtype1 != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    df = df[df["subtype1_name"] == selected_subtype1]

# ========== ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≠‡∏á ==========
subtype2_list = df["subtype2_name"].dropna().unique()
selected_subtype2 = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≠‡∏á", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(subtype2_list), key="subtype2_filter")
if selected_subtype2 != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    df = df[df["subtype2_name"] == selected_subtype2]

# ========== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ ==========
search_text = st.text_input("üîç ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤", key="search_text")
if search_text.strip():
    df = df[df["drug_name"].fillna("").str.contains(search_text, case=False)]

# ========== ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå account_drug_ID ==========
account_list = df["account_drug_ID"].dropna().unique()
selected_account = st.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏≤",
    ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(list(account_list)),
    key="account_filter"
)
if selected_account != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    df = df[df["account_drug_ID"] == selected_account]

# ========== ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ==========
st.caption(f"üéØ ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á: {selected_subtype1} > {selected_subtype2} | ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {search_text if search_text else '-'}")
st.subheader(f"üìã ‡∏û‡∏ö {len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")

# ========== ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ ==========
if df.empty:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
else:
    for _, row in df.iterrows():
        group_parts = [
            str(row.get("subtype1_name", "")).strip(),
            str(row.get("subtype2_name", "")).strip(),
            str(row.get("subtype3_name", "")).strip()
        ]
        group_info = " > ".join([g for g in group_parts if g and g.lower() != "nan"])

        st.markdown(f"""
        <div class="drug-card">
            <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤:</strong> {row['drug_name']}<br>
            <strong>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</strong> {row['account_drug_ID']}<br>
            <strong>‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡∏≤:</strong> {group_info if group_info else '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        </div>
        """, unsafe_allow_html=True)

    st.markdown(to_excel_download(df), unsafe_allow_html=True)

# ========== Footer ==========
st.markdown("---")
st.caption("‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÇ‡∏î‡∏¢ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á‡∏ä‡∏±‡∏¢‡∏û‡∏±‡∏í‡∏ô‡πå | ¬© 2568")
